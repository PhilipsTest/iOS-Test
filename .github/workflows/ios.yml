name: iOS starter workflow

on:
  workflow_dispatch:
  push:
    branches:
      - '**'
  pull_request:
    branches: [ feature/GitHub_Actions ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: self-hosted

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
        with: 
          fetch-depth: 0
          clean: true
          submodules: true
          lfs: false
      
      - name: Initialize
        env:
          podfilePath: ${{ 'Source' }}
        shell: bash
        run: |
             pwd
             rm -rf Source/results/*
             rm -rf Source/build/*.ipa
             rm -rf ~/Library/Developer/Xcode/DerivedData
             rm -rf Source/DerivedData
             ./ci-build-support/update_version.sh
             rm -rf ./Source/Podfile.lock
             echo "Running pod install for ${podfilePath}"
             cd ./Source && pod cache clean --all && pod repo update && pod install
      
      - name: Zip Components
        if: startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/release/platform_')
        shell: bash
        run: |
             chmod -R 755 .
             ./ci-build-support/zip_components.sh 
      
      - name: Run Unit Tests
        #./ci-build-support/testScript.sh PhilipsPRXClientDev PhilipsPRXClient Test Report
        #echo "shouldForceUnitTests=True" >> $GITHUB_ENV
        #[ ${GITHUB_REF#refs/heads/} == release/platform_* ]
        env:
          shouldForceUnitTests: false
        run: |
             updatedComponents=$(ci-build-support/getUpdatedComponents.groovy)
             echo $updatedComponents
             if [ "${GITHUB_REF#refs/heads/}" == 'develop*' ] || [ "${GITHUB_REF#refs/heads/}" == 'release/platform_*' ]
                then
                    shouldForceUnitTests=true
             fi
             
             echo $shouldForceUnitTests
             chmod -R 755 .
             ./ci-build-support/testScript.sh AppFramework AppFramework
             if $shouldForceUnitTests; then
                ./ci-build-support/testScript.sh PhilipsConsumerCareDev PhilipsConsumerCare
                ./ci-build-support/testScript.sh PhilipsProductRegistrationDev PhilipsProductRegistration
                
                ./ci-build-support/testScript.sh InAppPurchaseDev InAppPurchase
                ./ci-build-support/testScript.sh PhilipsRegistrationDev PhilipsRegistration
                ./ci-build-support/testScript.sh AppInfraDev AppInfra
                ./ci-build-support/testScript.sh UAPPFrameworkDev UAPPFramework
                ./ci-build-support/testScript.sh PlatformInterfacesDev PlatformInterfaces
                ./ci-build-support/testScript.sh PhilipsProductSelectionDev PhilipsProductSelection
                ./ci-build-support/testScript.sh PIMDev PIM
                ./ci-build-support/testScript.sh PhilipsEcommerceSDKDev PhilipsEcommerceSDK
                ./ci-build-support/testScript.sh MobileEcommerceDev MobileEcommerce
                ./ci-build-support/testScript.sh ConversationalChatbotDev ConversationalChatbot
             fi
     
      - name: Build Ref App
        if: startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/release/platform_')
        #runBuildWithIPA(true,"AppFramework","rap/Source/App/AppFramework")
        env:
          schemeName: ${{ 'AppFramework' }}
          exportPath: ${{ 'rap/Source/App/AppFramework' }}
        shell: bash
        run: |
             #!/bin/bash -l
             killall Simulator || true
             export LC_CTYPE=en_US.UTF-8

             cd Source

              xcodebuild clean archive -workspace "PLF-IOS-WORKSPACE.xcworkspace" -configuration Release -scheme ${schemeName} CLANG_WARN_DOCUMENTATION_COMMENTS='NO' -archivePath build/${schemeName} -UseModernBuildSystem='YES'
              xcodebuild -exportArchive -exportOptionsPlist ${exportPath}/exportOptions.plist -archivePath "build/${schemeName}.xcarchive/" -exportPath "build/" -UseModernBuildSystem='YES'
              
     # - name: Generate API Documentation
      #  if: startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/release/platform_')  
       # shell: bash
        #run: |
         #    chmod -R 755 .
          #   ./ci-build-support/generateApiDocs.sh.sh
         
      #- name: Build Demo Apps
        #runBuildWithIPA(true,"USRDemoApp","usr/Source/DemoApp")
        #env:
         # schemeName: ${{ 'USRDemoApp' }}
          #exportPath: ${{ 'usr/Source/DemoApp' }}
        #shell: bash
        #run: |
         #    #!/bin/bash -l
          #   killall Simulator || true
           #  export LC_CTYPE=en_US.UTF-8

            # cd Source
             
             #xcodebuild clean archive -workspace "PLF-IOS-WORKSPACE.xcworkspace" -configuration Release -scheme ${schemeName} CLANG_WARN_DOCUMENTATION_COMMENTS='NO' -archivePath build/${schemeName} -UseModernBuildSystem='YES'
             #xcodebuild -exportArchive -exportOptionsPlist ${exportPath}/exportOptions.plist -archivePath "build/${schemeName}.xcarchive/" -exportPath "build/" -UseModernBuildSystem='YES'
           
              
      - name: Build PIM Demo App
        #runBuildWithIPA(true,"PIMDemoApp","pim/Source/DemoApp")
        if: startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/release/platform_')
        env:
          schemeName: ${{ 'PIMDemoApp' }}
          exportPath: ${{ 'pim/Source/DemoApp' }}
        shell: bash
        run: |
             #!/bin/bash -l
             killall Simulator || true
             export LC_CTYPE=en_US.UTF-8

             cd Source

             xcodebuild clean archive -workspace "PLF-IOS-WORKSPACE.xcworkspace" -configuration Release -scheme ${schemeName} CLANG_WARN_DOCUMENTATION_COMMENTS='NO' -archivePath build/${schemeName} -UseModernBuildSystem='YES'
             xcodebuild -exportArchive -exportOptionsPlist ${exportPath}/exportOptions.plist -archivePath "build/${schemeName}.xcarchive/" -exportPath "build/" -UseModernBuildSystem='YES'
             
      
      #- name: Build PSRA App
       # #runBuildWithIPA(true,"PSRARelease","rap/Source/App/AppFramework")
        #env:
         # schemeName: ${{ 'PSRARelease' }}
          #exportPath: ${{ 'rap/Source/App/AppFramework' }}
        #shell: bash
        #run: |
         #    #!/bin/bash -l
          #   killall Simulator || true
           #  export LC_CTYPE=en_US.UTF-8

            # cd Source

             #xcodebuild clean archive -workspace "PLF-IOS-WORKSPACE.xcworkspace" -configuration Release -scheme ${schemeName} CLANG_WARN_DOCUMENTATION_COMMENTS='NO' -archivePath build/${schemeName} -UseModernBuildSystem='YES'
             #xcodebuild -exportArchive -exportOptionsPlist ${exportPath}/exportOptions.plist -archivePath "build/${schemeName}.xcarchive/" -exportPath "build/" -UseModernBuildSystem='YES'

      
      - name: Publish Zips
        if: startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/release/platform_')
        shell: bash
        run: |
             chmod -R 755 .
             ./ci-build-support/publish_zips.sh   
             
      - name: Publish Podspecs
        if: startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/release/platform_')
        run: |
             echo "${{ github.ref }}"
             echo "${GITHUB_REF#refs/heads/}"
             chmod -R 755 .
             ./ci-build-support/publish_podspecs.sh ./PlatformInterfaces.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./AppInfra.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./AppInfraMicroApp.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./PhilipsPRXClient.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./UAPPFramework.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./PhilipsRegistration.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./PhilipsRegistrationMicroApp.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./PhilipsProductSelection.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./InAppPurchase.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./InAppPurchaseDemoUApp.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./PhilipsConsumerCare.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./ConsumerCareMicroApp.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./PhilipsProductRegistration.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./PhilipsProductRegistrationUApp.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./PIM.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./PIMDemoUApp.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./PhilipsEcommerceSDK.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./MobileEcommerce.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./ConversationalChatbotDemoUApp.podspec ./Source/Podfile.lock
             ./ci-build-support/publish_podspecs.sh ./ConversationalChatbot.podspec ./Source/Podfile.lock
            
      
      #- name: Publish API Docs
       # if: startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/release/platform_')  
        #shell: bash
        #run: |
         #    chmod -R 755 .
          #   artifactoryBasePath=$(./ci-build-support/getArtifactoryBasePath.sh)
           #  versionNumber=$(ci-build-support/getCDP2PlatformVersionNumber.sh)
             
            # echo "Using Artifactory BasePath $artifactoryBasePath"
             #echo "using versionNumber $versionNumber"
             
             #set -e
             #if [ -z "$artifactoryBasePath" ]
             #then
              #   echo "Not published as build is not on a develop or release branch" . ${GITHUB_REF#refs/heads/}
               #  exit 0
             #fi
             
             #API_DOC_ZIP="API_DOCS_${versionNumber}.zip"
             #zip -r $API_DOC_ZIP . -i Test
             #curl -L -u 320049003:AP4ZB7JSmiC4pZmeKfKTGLsFvV9 -X PUT "$artifactoryBasePath"/API_DOCS/ -T $API_DOC_ZIP
